package org.janalyse

import org.slf4j.{Logger, LoggerFactory}

object Synchronize {
  val logger: Logger = LoggerFactory.getLogger(getClass.getName)
  def now(): Long = System.currentTimeMillis()
  def howLong[T](proc: => T):(T, Long) = {
    val started = now()
    val result = proc
    result -> (now() - started)
  }

  def formatChanges(changes: List[Change]): List[String] = {
    for {
      change <- changes.sortBy(_.example.filename)
      filename = change.example.filename
      summary <- change.example.summary
      url <- change.publishedUrls.get("gist") // TODO - Hardcoded for gist
    } yield {
      s"- [$filename]($url) : $summary"
    }
  }

  private def formatChangesByCategories(changes:List[Change]): String = {
    val markdownFormattedLinesForExamples =
      changes.groupBy(_.example.category).toList.sortBy{case(k,_)=>k}.flatMap{
        case (None, changes) =>
          s"## Without category"::formatChanges(changes)
        case (Some(category), changes) =>
          s"## $category" :: formatChanges(changes)
      }
    val content = markdownFormattedLinesForExamples.mkString("\n")
    content
  }

  def updateOverview(changes: List[Change])(implicit parameters:Parameters):Change = {
    val exampleUUID = parameters.examplesOverviewUUID
    val exampleSummary = "Examples overview."
    val examplesCount = changes.size

//    val examplesStructuredListContent = for {
//                (fileExt, changesForFileExt) <- changes.groupBy(_.example.fileExt)
//    } yield formatChangesByFileExtensions(changesForFileExt,fileExt)
    val examplesStructuredListContent = formatChangesByCategories(changes)::Nil

    val header =
      s"""# Code examples knowledge base
         |- Generated by [code-examples-manager](https://github.com/dacr/code-examples-manager)
         |  + The origin of this tool comes from [this talk](https://www.youtube.com/watch?v=61AGIBdG7YE)
         |    * Originally presented at [AlpesCraft 2019](https://www.alpescraft.fr/edition_2019/)
         |- $examplesCount published examples
         |""".stripMargin

    val example = new CodeExample {
      override val filename: String = "index.md"
      override val category: Option[String] = None
      override val summary: Option[String] = Some(exampleSummary)
      override val keywords: List[String] = Nil
      override val publish: List[String] = Nil
      override val authors: List[String] = Nil
      override val uuid: Option[String] = Some(exampleUUID)

      override def content: String = header++examplesStructuredListContent.mkString("\n")
      override def checksum: String = Hashes.sha1(content)
    }
    ExamplesManager.upsert(example)
  }

  def main(args: Array[String]): Unit = {
    logger.info("Started")
    val (_, duration) = howLong {
      implicit val parameters:Parameters = Parameters()
      import ExamplesManager.{getExamples, synchronize}
      val examples = getExamples
      logger.info(s"Found ${examples.size} available locally for synchronization purpose")
      val uuids = examples.flatMap(_.uuid)
      val duplicated = uuids.groupBy(u => u).filter { case (_, duplicated) => duplicated.size > 1 }.keys
      assert(duplicated.isEmpty, "Found duplicated UUIDs : " + duplicated.mkString(","))
      val changes = synchronize(examples)
      LogChanges(changes)
      val overviewChange = updateOverview(changes)
      val overviewMessage = "Examples overview is available at "+overviewChange.publishedUrls.getOrElse("gist", "??") // TODO - Hardcoded for gist
      logger.info(overviewMessage)
      println(overviewMessage)
    }
    logger.info(s"Finished in ${duration/1000}s")
  }

  private def LogChanges(changes: List[Change]): Unit = {
    changes
      .filterNot(_.isInstanceOf[NoChange])
      .map(_.toString)
      .sorted
      .foreach(logger.info)
  }
}