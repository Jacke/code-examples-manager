package fr.janalyse.cem

import fr.janalyse.cem.externalities.publishadapter.PublishAdapter
import fr.janalyse.cem.externalities.publishadapter.github.GithubPublishAdapter
import fr.janalyse.cem.externalities.publishadapter.gitlab.GitlabPublishAdapter
import org.slf4j.{Logger, LoggerFactory}

object Synchronize {
  val logger: Logger = LoggerFactory.getLogger(getClass.getName)
  def now(): Long = System.currentTimeMillis()
  def howLong[T](proc: => T):(T, Long) = {
    val started = now()
    val result = proc
    result -> (now() - started)
  }

  def formatChanges(changes: Seq[Change]): Seq[String] = {
    for {
      change <- changes.sortBy(_.example.filename)
      filename = change.example.filename
      summary <- change.example.summary
      url <- change.publishedUrl
    } yield {
      s"- [$filename]($url) : $summary"
    }
  }

  private def formatChangesByCategories(changes:Seq[Change]): String = {
    val markdownFormattedLinesForExamples =
      changes.groupBy(_.example.category).toList.sortBy{case(k,_)=>k}.flatMap{
        case (None, changes) =>
          s"## Without category"+:formatChanges(changes)
        case (Some(category), changes) =>
          s"## $category" +: formatChanges(changes)
      }
    val content = markdownFormattedLinesForExamples.mkString("\n")
    content
  }

  def updateOverview(changes: Seq[Change], adapter: PublishAdapter)(implicit config:CodeExampleManagerConfig):Change = {
    val exampleUUID = adapter.config.overviewUUID
    val exampleSummary = "Examples overview."
    val examplesCount = changes.size

//    val examplesStructuredListContent = for {
//                (fileExt, changesForFileExt) <- changes.groupBy(_.example.fileExt)
//    } yield formatChangesByFileExtensions(changesForFileExt,fileExt)
    val examplesStructuredListContent = formatChangesByCategories(changes)::Nil

    val header =
      s"""# Code examples knowledge base
         |- Generated by [code-examples-manager](https://github.com/dacr/code-examples-manager)
         |  + The origin of this tool comes from [this talk](https://www.youtube.com/watch?v=61AGIBdG7YE)
         |    * Originally presented at [AlpesCraft 2019](https://www.alpescraft.fr/edition_2019/)
         |- $examplesCount published examples
         |""".stripMargin

    val example = new CodeExample {
      override val filename: String = "index.md"
      override val category: Option[String] = None
      override val summary: Option[String] = Some(exampleSummary)
      override val keywords: List[String] = Nil
      override val publish: List[String] = Nil
      override val authors: List[String] = Nil
      override val uuid: Option[String] = Some(exampleUUID)

      override def content: String = header++examplesStructuredListContent.mkString("\n")
      override def checksum: String = Hashes.sha1(content)
    }
    ExamplesManager.upsert(example, adapter)
  }

  def main(args: Array[String]): Unit = {
    logger.info("Started")
    val (_, duration) = howLong {
      implicit val config:CodeExampleManagerConfig = Configuration()

      val availableLocalExamples = ExamplesManager.getExamples
      logger.info(s"Found ${availableLocalExamples.size} available locally for synchronization purpose")
      val uuids = availableLocalExamples.flatMap(_.uuid)
      val duplicated = uuids.groupBy(u => u).filter { case (_, duplicated) => duplicated.size > 1 }.keys
      assert(duplicated.isEmpty, "Found duplicated UUIDs : " + duplicated.mkString(","))

      for { (adapterConfigName, adapterConfig) <- config.publishAdapters } {
        val currentAdapterOption = adapterConfig.kind match {
          case "gitlab" =>
            GitlabPublishAdapter.lookup(adapterConfig)
          case "github" =>
            GithubPublishAdapter.lookup(adapterConfig)
          case unrecognized =>
            logger.warn(s"Unrecognized adapter kind $unrecognized, only [gitlab|github] are supported")
            None
        }
        val examplesForCurrentAdapter = availableLocalExamples.filter(_.publish.contains(adapterConfig.activationKeyword))
        currentAdapterOption.foreach { adapter =>
          logger.info(s"$adapterConfigName : Synchronizing ${examplesForCurrentAdapter.size} examples using ${adapter.getClass.getName}")
          val changes = ExamplesManager.synchronize(examplesForCurrentAdapter, adapter)
          LogChanges(changes)
          val overviewChange = updateOverview(changes, adapter)
          val overviewMessage = s"$adapterConfigName : Examples overview is available at ${overviewChange.publishedUrl.getOrElse("")}"
          logger.info(overviewMessage)
          println(overviewMessage)
        }
      }
    }
    logger.info(s"Finished in ${duration/1000}s")
  }

  private def LogChanges(changes: Seq[Change]): Unit = {
    changes
      .filterNot(_.isInstanceOf[NoChange])
      .map(_.toString)
      .sorted
      .foreach(logger.info)
  }
}